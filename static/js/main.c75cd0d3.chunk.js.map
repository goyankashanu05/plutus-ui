{"version":3,"sources":["Component/Chart.js","Component/EnterAddress.js","utils/prepareData.js","utils/filterDates.js","App.js","utils/constants.js","serviceWorker.js","index.js"],"names":["Chart","props","options","tooltips","displayColors","titleFontSize","bodyFontSize","xPadding","yPadding","callbacks","label","tooltipItem","data","Date","labels","index","x","toGMTString","y","blockheight","hover","mode","intersect","maintainAspectRatio","scales","xAxes","type","position","chartData","EnterAddress","placeholder","onChange","e","handleAddressEvent","onClick","handleSearch","calculateValue","transaction","address","vout","sum","forEach","scriptPubKey","addresses","findIndex","addrss","parseFloat","value","calculateSumVout","vin","calculateSumVin","getPastweekDate","curr","first","getDate","getDay","firstday","setDate","toUTCString","parseInt","getTime","getPastMonthsDate","month","setMonth","getMonth","override","css","App","handleAddressChange","event","setState","target","a","async","loading","apiData","txs","getDetail","console","log","state","updateGraph","filterChartData","dataArray","amountArray","sort","b","time","push","getDataArray","datasets","showLine","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fill","getApiData","page","totalPages","itemsOnPage","pageSize","apiPath","axios","get","then","response","filteredChartData","filterChartDataByDates","dateRange","startDate","endDate","filerByTime","dateFilterValue","dateFilterRange","date","setHours","start","currentDate","Map","set","getStartEndDates","process","className","this","selected","size","margin","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c75cd0d3.chunk.js","sourcesContent":["import React from 'react'\nimport { Scatter } from 'react-chartjs-2'\n\nfunction Chart(props) {\n  const options = {\n    tooltips: {\n      displayColors: false,\n      titleFontSize: 16,\n      bodyFontSize: 14,\n      xPadding: 10,\n      yPadding: 10,\n      callbacks: {\n        label: (tooltipItem, data) => {\n          return [`Time : ${ new Date(data.labels[tooltipItem.index].x* 1000).toGMTString()}` , `Amount : ${data.labels[tooltipItem.index].y}`,`Block Height : ${data.labels[tooltipItem.index].blockheight}`]\n        }\n      }\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true\n    },\n    maintainAspectRatio: true,\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom'\n      }]\n    }\n  }\n  return (\n    <div>\n      <Scatter\n        data={props.chartData}\n        options={options} />\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\n\nfunction EnterAddress(props) {\n    return (\n        <div>\n            <input \n            type=\"text\" \n            placeholder=\"Enter Address\"\n            onChange={(e) => props.handleAddressEvent(e)}/>\n            <button onClick={() => props.handleSearch()}>SEARCH</button>\n        </div>\n    )\n}\n\nexport default EnterAddress\n","export const getDataArray = (filterChartData, address) => {\n  var amountArray = [];\n\n  filterChartData = filterChartData.sort(function (a, b) {          //sorting input data by timestamp\n    return a.time - b.time;\n  })\n  let sum = 0;\n  filterChartData.forEach(function (data) {\n    sum += calculateValue(data, address)\n    amountArray.push({ x: data.time, y: sum, blockheight: data.blockheight })\n  })\n  return amountArray;\n}\n\nexport const calculateSumVin = (vin, address) => {\n  let sum = 0;\n  vin.forEach((transaction) => {\n    if (transaction.addresses.findIndex((addrss) => {\n      return addrss === address\n    }) !== -1) {\n      sum += parseFloat(transaction.value);\n    }\n  })\n  return sum;\n}\n\nexport const calculateSumVout = (vout, address) => {\n  let sum = 0;\n  vout.forEach((transaction) => {\n    if (transaction.scriptPubKey.addresses.findIndex((addrss) => {\n      return addrss === address\n    }) !== -1) {\n      sum += parseFloat(transaction.value);\n    }\n  })\n\n  return sum;\n}\n\nexport const calculateValue = (transaction, address) => {\n  return (calculateSumVout(transaction.vout, address) - calculateSumVin(transaction.vin, address));\n}\n","import { FILTER_TODAY, FILTER_THIS_YEAR, FILTER_6_MONTH_AGO, FILTER_3_MONTH_AGO, FILTER_THIS_MONTH, FILTER_THIS_WEEK } from \"./constants\";\n\nexport const getStartEndDates = (dateFilterRange) => {\n    let date =new Date()\n    date.setHours(0, 0, 0,0);\n    const start = parseInt(date.getTime() / 1000);\n    date.setHours(23,59,59,999);\n    const currentDate = parseInt(date.getTime() / 1000);\n    return new Map()\n        .set(FILTER_TODAY, { startDate: start, endDate: currentDate })\n        .set(FILTER_THIS_WEEK, { startDate: getPastweekDate(), endDate: currentDate })\n        .set(FILTER_THIS_MONTH, { startDate: getPastMonthsDate(1), endDate: currentDate })\n        .set(FILTER_3_MONTH_AGO, { startDate: getPastMonthsDate(3), endDate: currentDate })\n        .set(FILTER_6_MONTH_AGO, { startDate: getPastMonthsDate(6), endDate: currentDate })\n        .set(FILTER_THIS_YEAR, { startDate: getPastMonthsDate(12), endDate: currentDate })\n        .get(dateFilterRange);\n};\n\nexport const getPastweekDate = () => {\n    var curr = new Date(); // get current date\n    const first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n    const firstday = new Date(curr.setDate(first)).toUTCString();\n    return parseInt(new Date(firstday).getTime() / 1000);\n}\nexport const getPastMonthsDate = (month) => {\n    var curr = new Date();\n    curr.setMonth(curr.getMonth() - month);\n    return parseInt(new Date(curr).getTime() / 1000);\n}","import React from 'react';\nimport './App.css';\nimport Chart from './Component/Chart'\nimport EnterAddress from './Component/EnterAddress';\nimport axios from 'axios'\nimport { getDataArray } from './utils/prepareData';\nimport { FILTER_TODAY, FILTER_THIS_WEEK, FILTER_THIS_MONTH, FILTER_3_MONTH_AGO, FILTER_6_MONTH_AGO, FILTER_THIS_YEAR, ALL_DATA } from './utils/constants';\nimport { getStartEndDates } from './utils/filterDates';\nimport { css } from \"@emotion/core\";\n// import { ClipLoader } from \"react-spinners\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\nconst override = css`\ndisplay: block;\nmargin: 24% 45% auto;\nborder-color: red;\nposition: absolute;\n\n`;\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      address: '',\n      apiPath: process.env.PUBLIC_URL||'http://localhost:80/get-data/',\n      apiData: {\n        txs: []\n      },\n      loading: false,\n      chartData: [],\n      dateFilterValue: ''\n    }\n  }\n\n  handleAddressChange = (event) => {\n    this.setState({\n      address: event.target.value\n    })\n  }\n\n  handleSearch = async () => {\n    this.setState({ loading: true, apiData: { txs: [] } }, async () => {\n      await this.getDetail()\n      console.log(\"===api===\", this.state.apiData)\n      this.updateGraph(this.filterChartData(this.state.apiData));\n    })\n  }\n\n  updateGraph = (data) => {\n    let dataArray = getDataArray(data, this.state.address)\n    console.log(\"===data===\", dataArray)\n    this.setState({\n      loading: false,\n      chartData: {\n        labels: dataArray,\n        datasets: [\n          {\n            showLine: true,\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            label: \"Amount\",\n            fill: false,\n            data: dataArray\n          }\n        ]\n      }\n    })\n  }\n\n  getDetail = async () => {\n    await this.getApiData(1, 1000);\n    while (this.state.apiData.page < this.state.apiData.totalPages) {\n      await this.getApiData(this.state.apiData.page + 1, this.state.apiData.itemsOnPage);\n    }\n  };\n\n  getApiData = async (page, pageSize) => {\n\n    const { address, apiPath, apiData } = this.state\n    await axios.get(`${apiPath}${address}?page=${page}&pageSize=${pageSize}`)\n      .then(response => {\n        console.log(\"======response====\", response.data)\n        let data = response.data;\n        data.txs = [...apiData.txs, ...data.txs];\n        this.setState({\n          apiData: data\n        })\n      })\n  }\n\n  filterChartData = (apiData) => {\n    var filteredChartData = [];\n    apiData.txs.forEach(function (data) {\n      filteredChartData.push(data)\n    })\n    return filteredChartData;\n  }\n\n  filterChartDataByDates = (apiData, dateRange) => {\n    var filteredChartData = [];\n    apiData.txs.forEach(function (data) {\n      if (data.time >= dateRange.startDate && data.time < dateRange.endDate)\n        filteredChartData.push(data)\n    })\n    return filteredChartData;\n  }\n\n  filerByTime = (event) => {\n    if (event.target.value === ALL_DATA) {\n      let data = this.filterChartData(this.state.apiData)\n      this.updateGraph(data);\n    } else {\n      this.setState({ dateFilterValue: event.target.value })\n      const dateRange = getStartEndDates(event.target.value);\n      console.log('dateRange : ', dateRange)\n      let data = this.filterChartDataByDates(this.state.apiData, dateRange)\n      this.updateGraph(data);\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <EnterAddress\n          handleAddressEvent={this.handleAddressChange}\n          handleSearch={this.handleSearch} />\n        <select value={this.state.dateFilterValue} onChange={(event) => this.filerByTime(event)}>\n          <option value={ALL_DATA} selected>All Data</option>\n          <option value={FILTER_TODAY}>Last 24 Hours</option>\n          <option value={FILTER_THIS_WEEK}>This Week</option>\n          <option value={FILTER_THIS_MONTH}>This Month</option>\n          <option value={FILTER_3_MONTH_AGO}>3 Months ago</option>\n          <option value={FILTER_6_MONTH_AGO}>6 Months ago</option>\n          <option value={FILTER_THIS_YEAR}>This year</option>\n        </select>\n        <SyncLoader\n          css={override}\n          size={30}\n          margin={4}\n          color=\"green\"\n          loading={this.state.loading}\n        />\n        <Chart chartData={this.state.chartData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const FILTER_TODAY = 'FILTER_TODAY';\nexport const FILTER_THIS_YEAR = 'FILTER_THIS_YEAR';\nexport const FILTER_6_MONTH_AGO = 'FILTER_6_MONTH_AGO';\nexport const FILTER_3_MONTH_AGO = 'FILTER_3_MONTH_AGO';\nexport const FILTER_THIS_MONTH = 'FILTER_THIS_MONTH';\nexport const FILTER_THIS_WEEK = 'FILTER_THIS_WEEK';\nexport const ALL_DATA = 'ALL_DATA';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}